// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/horse"
	"api/ent/predicate"
	"api/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HorseUpdate is the builder for updating Horse entities.
type HorseUpdate struct {
	config
	hooks    []Hook
	mutation *HorseMutation
}

// Where appends a list predicates to the HorseUpdate builder.
func (hu *HorseUpdate) Where(ps ...predicate.Horse) *HorseUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetName sets the "name" field.
func (hu *HorseUpdate) SetName(s string) *HorseUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HorseUpdate) SetNillableName(s *string) *HorseUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hu *HorseUpdate) SetOwnerID(id int) *HorseUpdate {
	hu.mutation.SetOwnerID(id)
	return hu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (hu *HorseUpdate) SetNillableOwnerID(id *int) *HorseUpdate {
	if id != nil {
		hu = hu.SetOwnerID(*id)
	}
	return hu
}

// SetOwner sets the "owner" edge to the User entity.
func (hu *HorseUpdate) SetOwner(u *User) *HorseUpdate {
	return hu.SetOwnerID(u.ID)
}

// Mutation returns the HorseMutation object of the builder.
func (hu *HorseUpdate) Mutation() *HorseMutation {
	return hu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (hu *HorseUpdate) ClearOwner() *HorseUpdate {
	hu.mutation.ClearOwner()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HorseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HorseUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HorseUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HorseUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HorseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(horse.Table, horse.Columns, sqlgraph.NewFieldSpec(horse.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(horse.FieldName, field.TypeString, value)
	}
	if hu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   horse.OwnerTable,
			Columns: []string{horse.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   horse.OwnerTable,
			Columns: []string{horse.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{horse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HorseUpdateOne is the builder for updating a single Horse entity.
type HorseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HorseMutation
}

// SetName sets the "name" field.
func (huo *HorseUpdateOne) SetName(s string) *HorseUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HorseUpdateOne) SetNillableName(s *string) *HorseUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (huo *HorseUpdateOne) SetOwnerID(id int) *HorseUpdateOne {
	huo.mutation.SetOwnerID(id)
	return huo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (huo *HorseUpdateOne) SetNillableOwnerID(id *int) *HorseUpdateOne {
	if id != nil {
		huo = huo.SetOwnerID(*id)
	}
	return huo
}

// SetOwner sets the "owner" edge to the User entity.
func (huo *HorseUpdateOne) SetOwner(u *User) *HorseUpdateOne {
	return huo.SetOwnerID(u.ID)
}

// Mutation returns the HorseMutation object of the builder.
func (huo *HorseUpdateOne) Mutation() *HorseMutation {
	return huo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (huo *HorseUpdateOne) ClearOwner() *HorseUpdateOne {
	huo.mutation.ClearOwner()
	return huo
}

// Where appends a list predicates to the HorseUpdate builder.
func (huo *HorseUpdateOne) Where(ps ...predicate.Horse) *HorseUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HorseUpdateOne) Select(field string, fields ...string) *HorseUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Horse entity.
func (huo *HorseUpdateOne) Save(ctx context.Context) (*Horse, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HorseUpdateOne) SaveX(ctx context.Context) *Horse {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HorseUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HorseUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HorseUpdateOne) sqlSave(ctx context.Context) (_node *Horse, err error) {
	_spec := sqlgraph.NewUpdateSpec(horse.Table, horse.Columns, sqlgraph.NewFieldSpec(horse.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Horse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, horse.FieldID)
		for _, f := range fields {
			if !horse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != horse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(horse.FieldName, field.TypeString, value)
	}
	if huo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   horse.OwnerTable,
			Columns: []string{horse.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   horse.OwnerTable,
			Columns: []string{horse.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Horse{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{horse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
