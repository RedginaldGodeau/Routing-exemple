// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/horse"
	"api/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Horse is the model entity for the Horse schema.
type Horse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HorseQuery when eager-loading is set.
	Edges        HorseEdges `json:"edges"`
	user_horses  *int
	selectValues sql.SelectValues
}

// HorseEdges holds the relations/edges for other nodes in the graph.
type HorseEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HorseEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Horse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case horse.FieldID:
			values[i] = new(sql.NullInt64)
		case horse.FieldName:
			values[i] = new(sql.NullString)
		case horse.ForeignKeys[0]: // user_horses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Horse fields.
func (h *Horse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case horse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case horse.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case horse.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_horses", value)
			} else if value.Valid {
				h.user_horses = new(int)
				*h.user_horses = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Horse.
// This includes values selected through modifiers, order, etc.
func (h *Horse) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Horse entity.
func (h *Horse) QueryOwner() *UserQuery {
	return NewHorseClient(h.config).QueryOwner(h)
}

// Update returns a builder for updating this Horse.
// Note that you need to call Horse.Unwrap() before calling this method if this Horse
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Horse) Update() *HorseUpdateOne {
	return NewHorseClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Horse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Horse) Unwrap() *Horse {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Horse is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Horse) String() string {
	var builder strings.Builder
	builder.WriteString("Horse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Horses is a parsable slice of Horse.
type Horses []*Horse
